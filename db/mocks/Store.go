// Code generated by mockery v2.43.2. DO NOT EDIT.

package mockdb

import (
	context "context"

	sqlc "github.com/akoqassym/simplebank/db/sqlc"
	mock "github.com/stretchr/testify/mock"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// AddAccountBalance provides a mock function with given fields: ctx, arg
func (_m *Store) AddAccountBalance(ctx context.Context, arg sqlc.AddAccountBalanceParams) (sqlc.Account, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AddAccountBalance")
	}

	var r0 sqlc.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.AddAccountBalanceParams) (sqlc.Account, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.AddAccountBalanceParams) sqlc.Account); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(sqlc.Account)
	}

	if rf, ok := ret.Get(1).(func(context.Context, sqlc.AddAccountBalanceParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAccount provides a mock function with given fields: ctx, arg
func (_m *Store) CreateAccount(ctx context.Context, arg sqlc.CreateAccountParams) (sqlc.Account, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccount")
	}

	var r0 sqlc.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.CreateAccountParams) (sqlc.Account, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.CreateAccountParams) sqlc.Account); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(sqlc.Account)
	}

	if rf, ok := ret.Get(1).(func(context.Context, sqlc.CreateAccountParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEntry provides a mock function with given fields: ctx, arg
func (_m *Store) CreateEntry(ctx context.Context, arg sqlc.CreateEntryParams) (sqlc.Entry, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateEntry")
	}

	var r0 sqlc.Entry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.CreateEntryParams) (sqlc.Entry, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.CreateEntryParams) sqlc.Entry); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(sqlc.Entry)
	}

	if rf, ok := ret.Get(1).(func(context.Context, sqlc.CreateEntryParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTransfer provides a mock function with given fields: ctx, arg
func (_m *Store) CreateTransfer(ctx context.Context, arg sqlc.CreateTransferParams) (sqlc.Transfer, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransfer")
	}

	var r0 sqlc.Transfer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.CreateTransferParams) (sqlc.Transfer, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.CreateTransferParams) sqlc.Transfer); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(sqlc.Transfer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, sqlc.CreateTransferParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccount provides a mock function with given fields: ctx, id
func (_m *Store) DeleteAccount(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccount provides a mock function with given fields: ctx, id
func (_m *Store) GetAccount(ctx context.Context, id int64) (sqlc.Account, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 sqlc.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (sqlc.Account, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) sqlc.Account); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(sqlc.Account)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountForUpdate provides a mock function with given fields: ctx, id
func (_m *Store) GetAccountForUpdate(ctx context.Context, id int64) (sqlc.Account, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountForUpdate")
	}

	var r0 sqlc.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (sqlc.Account, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) sqlc.Account); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(sqlc.Account)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEntry provides a mock function with given fields: ctx, id
func (_m *Store) GetEntry(ctx context.Context, id int64) (sqlc.Entry, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetEntry")
	}

	var r0 sqlc.Entry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (sqlc.Entry, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) sqlc.Entry); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(sqlc.Entry)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransfer provides a mock function with given fields: ctx, id
func (_m *Store) GetTransfer(ctx context.Context, id int64) (sqlc.Transfer, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTransfer")
	}

	var r0 sqlc.Transfer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (sqlc.Transfer, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) sqlc.Transfer); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(sqlc.Transfer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAccounts provides a mock function with given fields: ctx, arg
func (_m *Store) ListAccounts(ctx context.Context, arg sqlc.ListAccountsParams) ([]sqlc.Account, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListAccounts")
	}

	var r0 []sqlc.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.ListAccountsParams) ([]sqlc.Account, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.ListAccountsParams) []sqlc.Account); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlc.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sqlc.ListAccountsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEntries provides a mock function with given fields: ctx, arg
func (_m *Store) ListEntries(ctx context.Context, arg sqlc.ListEntriesParams) ([]sqlc.Entry, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListEntries")
	}

	var r0 []sqlc.Entry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.ListEntriesParams) ([]sqlc.Entry, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.ListEntriesParams) []sqlc.Entry); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlc.Entry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sqlc.ListEntriesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTransfers provides a mock function with given fields: ctx, arg
func (_m *Store) ListTransfers(ctx context.Context, arg sqlc.ListTransfersParams) ([]sqlc.Transfer, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListTransfers")
	}

	var r0 []sqlc.Transfer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.ListTransfersParams) ([]sqlc.Transfer, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.ListTransfersParams) []sqlc.Transfer); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlc.Transfer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sqlc.ListTransfersParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransferTx provides a mock function with given fields: ctx, arg
func (_m *Store) TransferTx(ctx context.Context, arg sqlc.TransferTxParams) (sqlc.TransferTxResult, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for TransferTx")
	}

	var r0 sqlc.TransferTxResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.TransferTxParams) (sqlc.TransferTxResult, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.TransferTxParams) sqlc.TransferTxResult); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(sqlc.TransferTxResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, sqlc.TransferTxParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAccount provides a mock function with given fields: ctx, arg
func (_m *Store) UpdateAccount(ctx context.Context, arg sqlc.UpdateAccountParams) (sqlc.Account, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccount")
	}

	var r0 sqlc.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.UpdateAccountParams) (sqlc.Account, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.UpdateAccountParams) sqlc.Account); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(sqlc.Account)
	}

	if rf, ok := ret.Get(1).(func(context.Context, sqlc.UpdateAccountParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
